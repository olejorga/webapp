===========================
| HI칒 WEBAPP EKSAMEN 2022 |
===========================

REPO: https://github.com/olejorga/webapp_exam

MEDLEMMER:
    Erik Teien Jarem (studentnummer: 204081)
    Ole-J칮rgen Andersen (studentnummer: 202154)
    Simen Jacobsen 칒ygard  (studentnummer: 202903)

OPPGAVE 1:

    INSTALLASJON:
        1. Kj칮r "npm i".
        2. Kj칮r "npm run dev" for 친 starte appen (http://localhost:3000/).

OPPGAVE 2:

    INSTALLASJON:
        1. Kj칮r "npm i".
        2. Kj칮r "npm run prisma:migrate".
        3. Kj칮r "npm run prisma:seed" for 친 fylle databasen.
        4. Kj칮r "npm run dev" for 친 starte appen (http://localhost:3000/).


OPPGAVE 3:

    INSTALLASJON:

        1. Kj칮r "npm i".
        2. Kj칮r "npm run prisma:migrate".
        3. Kj칮r "npm run dev" for 친 starte appen (http://localhost:3000/).
        4. N친r appen kj칮rer, trykk "demo" eller "generate" for 친 fylle databasen med data.

    VIKTIG:

        * I /.env er m친l hostname for api.

        * I /lunch.options.json er konfigurasjonen for lunsj-algoritmen.

        * N친r man trykker "generate" eller "demo" t칮mmes databasen f칮rst.

        * Enkelte api endepunktene har et delay p친 1s for 친 kunne vise loader animasjonen.

        * Se kommentarene i /lib/lunch.ts ang친ende algoritme implementasjonen.

        * Se kommentar i "newEmployeePage.test.tsx", da vi hadde litt problemer med en av testene.

        * Vi har lagt mye jobb i sm친 detaljer. 游땔

            * Som f.eks. 친 disable utilgjengelige options i select lister.

    ALGORITMEN:

        F칮lgende er stegene i v친r implementasjonen av algoritmen.

        1. Genererer et 친r, best친ende av uker og dager.
        2. For hver dag i 친ret hentes en ansatt etter f칮lgende regler
            2.1. Sjekk om dagen er uken er registrert som ferie, og om dagen er gyldig
            2.2. For칮ker 친 hente de som kun kan denne dagen. eks: 'day:1' p친 mandag
            2.3. Om 2.1 ikke returnerer noen gyldig hentes alle som kan lage lunsj den dagen
            2.4. Lag en random index.
            2.5. Om ansatt i gitt index treffer p친 hasOccured-sjekken fjernes den ansatte fra listen over de gyldige, og det trekkes igjen frem til listen har 1 igjen.
            2.6. hasOccured sjekker om den ansatte er satt opp: 
                2.6.1. denne uken
                2.6.2. over gjennomsnittet mange ganger allerede 
                2.6.3. samme dag uken f칮r
                2.6.4. over maxOccurence denne perioden
            2.7. hasOccured prio 2.5.1 h칮yest og 2.5.4 nederst. 
            2.8. Om algoritmen ikke finner en gyldig ansatt vil den pr칮ve p친 nytt opp til 20 ganger
                2.8.1 Innen 20 fors칮k vil flere sjekker i hasOccured ha blitt tatt bort for 친 fors칮ke 친 finne en ansatt
                2.8.2 Overstiges 20 fors칮k vil det kastes en feil
            2.9. Den ansatte legges til gitt dag
        3. Gjenta 2 s친 lenge det er ledige dager

칒nsker deg en suveren juletid! 游꾼
